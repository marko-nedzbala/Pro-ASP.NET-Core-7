
Work PC SDK is 9.0.100

https://github.com/manningbooks/pro-asp.net-core-7


Chapter01
Putting ASP.NET Core in context

ASP.NET Core Identity: Microsoft's authentication and authorization framework, used to validate user credentials in ASP.NET Core applications restrict access to application features





PART I

Chapter02
Getting Started

uses SQL Server Express LocalDB

Need to install the .NET SDK
$ dotnet --list-sdks

$ dotnet new globaljson --sdk-version 7.0.100 --output FirstProject
$ dotnet new mvc --no-https --output FirstProject --framework net7.0
$ dotnet new sln -o FirstProject
$ dotnet sln FirstProject add FirstProject

Starting your application
$ dotnet run

he changed the lanuchSettings.json to use port 5000
htpp://localhost:5000

Endpoints
incoming requests are handled by endpoints
action: a method written in C#, defined in a controller
controller: C# class derived from Microsoft.AspNetCore.Mvc.Controller

Route: a rule that is used to decide how a request is handled

View: renders the HTML
telling ASP.NET to render a view
public class HomeController : Controller
{
    public ViewResult Index()
    {
        // MyView is the name of your view in the Views folder
        return View("MyView");
    }
}

Razor: is a view engine
Razor expressions: the expressions in views

Action method: main job is to construct data and pass it to the view so it can be used to create HTML content based on the data values, provide data to views by passing arguments to the iew method

View model: the data provided to the view
the type of view model:                         @model
view model value included in the HTML output:   @Model

Putting the pieces together
It is a simple result, but this example reveals all the building blocks you need to create a simple ASP.NET Core web application and to generate a dynamic response. The ASP.NET Core platform receives an HTTP request and uses the routing system to match the request URL to an endpoint. The endpoint, in this case, is the Index action method defined by the Home controller. The method is invoked and produces a ViewResult object that contains the name of a view and a view model object. The Razor view engine locates and processes the view, evaluating the @Model expression to insert the data provided by the action method into the response, which is returned to the browser and displayed to the user. There are, of course, many other features available, but this is the essence of ASP.NET Core, and it is worth bearing this simple sequence in mind as you read the rest of the book.



Chapter03
Your First ASP.NET Core Application

to watch your project for any changes
$ dotnet watch

Adding a data model
domain: the subject of real-world objects
domain model: contains C# objects (known as domain objects)

// Razor will look for file title MyView01.cshtml
public ViewResult MyView01()
{
    return View();
}

Linking pages in Razor
<a asp-action="MyViewname">Click Me</a>

asp-action is a tag helper attribute, is an instruction for Razor that will be performed when the view is rendered

Setting GET and POST

[HttpGet]
public ViewResult MyView()
{
    return View();
}

[HttpPost]
public ViewResult MyView(MyModel myModelInstance)
{
    return View();
}

Model binding: incoming data is parsed and key-value pairs in the HTTP request are used to populate properties of domain model types, avoids having to work with HTTP requests directly and allows to work with C# objects

Validation
validation rules are defined by applying attributes to model classes
System.ComponentModel.DataAnnotations namespace is used

static content is placed in the wwwroot folder

Bootstrap is installed by default with a MVC template

Good Summary
+CSS and JS packages are installed into wwwroot/lib
+ASP.NET Core projects are created with the dotnet new command.
+Controllers define action methods that are used to handle HTTP requests.
+Views generate HTML content that is used to respond to HTTP requests.
+Views can contain HTML elements that are bound to data model properties.
+Model binding is the process by which request data is parsed and assigned to the properties of objects that are passed to action methods for processing.
+The data in the request can be subjected to validation and errors can be displayed to the user within the same HTML form that was used to submit the data.



Chapter04
Using the development tools

Command lines
$ dotnet new --list     creates a new project

useful commands
    web: project with minimum code required for ASP.NET Core
    mvc: MVC project
    webapp: configured to use Razor pages
    blazorserver: configured for Blazor Server
    angular: uses Angular
    react: uses React
    reactredux: uses React and Redux library

configuration item
    globaljson: adds a global.json file
    sln: creates a solution file
    gitignore: creates a .gitignore file

Example of creating a project
$ dotnet new globaljson --sdk-version 7.0.100 --output MySolution/MyProject
$ dotnet new web --no-https --output MySolution/MyProject --framework net7.0
$ dotnet new sln -o MySolution
$ dotnet sln MySolution add MySolution/MyProjec

$ dotnet build  //build the project
$ dotnet run    //run the project
$ dotnet watch  //hot reload

Managing packages
$ dotnet add package packageName    //install packages
$ dotnet list package               //list packages
$ dotnet remove package packageName //remove packages

Client-side packages are added to ASP.NET Core using the Library manager (LibMan) tools

$ dotnet tool uninstall --global Microsoft.Web.LibraryManager.Cli
$ dotnet tool install --global Microsoft.Web.LibraryManager.Cli --version 2.1.175

Initializing the example project
$ libman init -p cdnjs

Debuggers
Visual Studio
https://learn.microsoft.com/en-us/visualstudio/debugger/?view=vs-2022

Visual Studio Code
https://code.visualstudio.com/docs/editor/debugging



Chapter05
Essential C# Features

Very good chapter on using C# features in the project
Reread this chapter later



Chapter06
Testing ASP.NET Core Applications

Very good chapter on testing
Reread this chapter later



Chapter07
SportsStore: A Real Application

@using MyApp.Models
@using statement allows us to namespace views without needing to refer to the namespace

using Razor layout
@{
    Layout = "myLayoutFile";
}

Steps:
1.) Install Entity Framework Core EF-Core
2.) Create the connection string
3.) Create the database context class
4.) Create repositoy interface and implementation class

builder.Services property is used to setup objects, services, that can be used through-out the application and are accessed via dependency injection

annotating a type
[Column(TypeName = "decimal(8, 2")]
public decimal Price { get; set; }

Step 1.) Install Entity Framework Core EF-Core
Install Entity Framework Core
$ dotnet add package Microsoft.EntityFrameworkCore.Design --version 7.0.0
$ dotnet add package Microsoft.EntityFrameworkCore.SqlServer --version 7.0.0

Also need a tools package, includes command-line tools required to prepare and create databases ASP.NET Core Applications
$ dotnet tool uninstall --global dotnet-ef
$ dotnet tool install --global dotnet-ef --version 7.0.0

Step 2.) Create the connection string
Connection Strings
appsettings.json

"AllowedHosts": "*",
"ConnectionStrings": {
  "SportsStoreConnection": "Server=(localdb)\\MSSQLLocalDB;Database=SportsStore;MultipleActiveResultSets=true"
}

Enables the MultipleActiveResultSets(MARS) feature, required by some database queries
https://www.connectionstrings.com/

Step 3.) Create the database context class
Create the database context class
EF-Core provides access to the database through a context class
./Models/MyDbContext.cs

using Microsoft.EntityFrameworkCore;

namespace SportsStore.Models
{
    public class StoreDbContext : DbContext //DbContext provides access to EF-Core functionality
    {
		// adds the properties that will be used to read/write the application's data
        public StoreDbContext(DbContextOptions<StoreDbContext> options) : base(options) { }
		
		// provides access to the Product objects in the database
        public DbSet<Product> Products => Set<Product>();
    }
}

We add the IConfiguration to access the ASP.NET Core configuration system, appsettings.json, via builder.Configuration
AddDbContext() registers the database context class and configures the relationship with the database

builder.Services.AddDbContext<StoreDbContext>(opts =>
{
    opts.UseSqlServer(builder.Configuration["ConnectionStrings:SportsStoreConnection"]);
});

Step 4.) Create repositoy interface and implementation class
IStoreRepository.cs

IQueryable<T> allows us to use LINQ to query the database

Services allow classes to use interfaces without needing to know which implementation class is being used

Creating databas migration
$ dotnet ef migrations add Initial

Creating seed data
create a file with the fake data

$ dotnet ef database update

Reset the database
$ dotnet ef database drop --force --context StoreDbContext


Displaying a list of products

1.) Prepare the controller
2.) Updating the view

Adding Pagination
a view model class is used specifically to pass data between a controller and a view

Adding a new route in Progam.cs
app.MapControllerRoute("pagination", "Products/Page{productPage}", new { Controller = "Home", action = "Index" });

Styling
install Bootstrap package

Client Side packages are installed LibMan
$ dotnet tool uninstall --global Microsoft.Web.LibraryManager.Cli
$ dotnet tool install --global Microsoft.Web.LibraryManager.Cli --version 2.1.175

BootStrap
$ libman init -p cdnjs
$ libman install bootstrap@5.2.3 -d wwwroot/lib/bootstrap



Chapter 07 through Chapter
Reread because it takes a quick tour of an ASP.NET Core Application

Chapter08
SportsStore: Navigation and Cart

Chapter09
SportsStore: Completing the cart









PART 2
Chapter12
Understanding the ASP.NET Core Platform

Key features to focus on:
1.) Request pipeline
2.) Middleware
3.) Services

Middleware and Request Pipeline
purpose of ASP.NET Core platform is to receive HTTP requests -> send respones to them
ASP delegates those to middleware components, request pipeline which are arranged in a chain

Services
are objects that provide features in a web application, any class can be used as a service
managed by ASP and dependency injection makes it possible to access services anywhere in the application

Minimum files needed for the project
Name                                Description
appsettings.json                    file used to configure the application
appsettings.Development.json        file defines the configuration settings specific to development
bin                                 folder contains the compiled application files
global.json                         file used to select a specific version of the .NET Core SDK
Properties/launchSettings.json      the files used to configure the application when it starts
obj                                 folder contains the intermediate output from the compiler
Platform.csproj                     file describes the project to the .NET Core tools
Platform.sln                        file to organize projects
Program.cs                          file that is the entry point for ASP

Program.cs

// create the builder
// responsible for setting up the basic features of the ASP.NET Core platform, creating servies, HTTP Server (Kestrel) to accept HTTP requests
var builder = WebApplication.CreateBuilder(args);

CreateBuilder() is a WebApplicationBuilder object used to register additional services, Build() finalizes this step
var app = builder.Build();

result of Build() is WebApplication object, used to setup middleware components

sets up 1 middleware component
app.MapGet("/", () => "Hello World");

MapGet() extension method for IEndpointRouteBuilder interface, implemented by WebApplication class

Platfom.csproj
the project file, contains the information that .NET Core uses to build the project and keep track of dependencies

Creating custom middleware
app.Use(...);
registers middleware component typically expressed as a lambda (another method is used for classes)

app.Use( lambda );
app.Use( async (context, next) => { ... });
lambda function takes:
1.) HttpContext: describes the HTTP request and the HTTP response provides additional context
2.) function that is invoked to tell ASP.NET Core to pass the request to the next middleware component in the pipeline

ASP is responsible for processing the HTTP request and the creation of the HttpRequest object, middleware and endpoints don't have to worry about the raw request data
Useful HttpRequest members

Name            Description
Body            This property returns a stream that can be used to read the request body.
ContentLength   This property returns the value of the Content-Length header.
ContentType     This property returns the value of the Content-Type header.
Cookies         This property returns the request cookies.
Form            This property returns a representation of the request body as a form.
Headers         This property returns the request headers.
IsHttps         This property returns true if the request was made using HTTPS.
Method          This property returns the HTTP verb—also known as the HTTP method—used for the request.
Path            This property returns the path section of the request URL.
Query           This property returns the query string section of the request URL as key-value pairs.

Useful HttpResponse members
Name                Description
ContentLength       This property sets the value of the Content-Length header.
ContentType         This property sets the value of the Content-Type header.
Cookies             This property allows cookies to be associated with the response.
HasStarted          This property returns true if ASP.NET Core has started to send the response headers to the client, after which it is not possible to make changes to the
                    status code or headers.
Headers             This property allows the response headers to be set.
StatusCode          This property sets the status code for the response.
WriteAsync(data)    This asynchronous method writes a data string to the response body.
Redirect(url)       This method sends a redirection response.

next.Invoke() and next() are equivalent, next() is convenience

Defining middleware using a class
./Platform/Middleware.cs

app.UseMiddleware<MyMiddleWareType>();

A single middleware object is used to handle all requests, code in Invoke() must be thread-safe

Several middleware components collectively contribue to the response that is produced, each providing some aspect of the response or providing some feature of data that is used in the pipeline

Middleware components must not change the response status code or headers once ASP has started to send the reponse to the client, use the HasStarted property to check this

components that generate complete responses can choose not to call the next() so the request isn't passed on
short-circuit the pipeline: components that don't pass on requests

Creating pipeline branches
Map() used to create a section of pipeline that is used to process requests for specific URLs

app.Map("/branch", branch => {
	branch.UseMiddleware<>();
});

MapWhen() will match requests using a predicate, allowing requests to be selected for a pipeline branch on criteria other than just URLs
MapWhen(context => context.Request.Query.Keys.Contains("branch"),
	branch => {
		// add middleware components here
});

Terminal middleware
never forwards requests to other components and always marks the end of the request pipeline
Run() a convenience feature for creating terminal middleware

Configuring middleware
options pattern: a common pattern for configuring middleware

an example of dependency injection

1.) define a class that contains the configuration options for a middleware component
class MyClass {
	public string City { get; set; } = "AnyTown";
	public string Country { get; set; } = "Fake";
}

2.) Use the options pattern in Program.cs
// must appear before the build()
builder.Services.Configure<MyClass>(options => { options = options.City = "Fake Town"; });

3.) Middleware components can access the configuration options by defining a parameter for the function that handles the request

app.MapGet("/city", async (HttpContext context, IOptions<MessageOptions> msgOpts) => {
	Platfom.MessageOptions opts = msgOpts.Value;
	await context.Response.WriteAsync($"{opts.City}, " + opts.CountryName);
});

Options pattern with class-based middleware



Chapter13
Using URL Routing

custom middleware components can be used instead of routing

most components, especially terminal and short-circuiting components, are trying to match URLs

routing: introduces middleware that takes care of matching request URLs so that the components, endpoints, can focus on responses
route: the mapping between endpoints and URLs they require
routing: the process of inspecting the set of routes, finding the endpoints to handle the request

Adding routing middleware
UseRouting(): adds the middleware responsible for processing requests to the pipeline
UseEndpoints(): used to define the routes that match URLs to endpoints, receives a function that accepts an IEndpointRouteBuilder object and uses it to create routes using the extension methods

The IEndpointRouteBuilder extension methods
Name									Description
MapGet(pattern, endpoint)				This method routes HTTP GET requests that match the URL pattern to the endpoint.
MapPost(pattern, endpoint)				This method routes HTTP POST requests that match the URL pattern to the endpoint.
MapPut(pattern, endpoint)				This method routes HTTP PUT requests that match the URL pattern to the endpoint.
MapDelete(pattern, endpoint)			This method routes HTTP DELETE requests that match the URL pattern to the endpoint.
MapMethods(pattern, methods, endpoint)	This method routes requests made with one of the specified HTTP methods that match the URL pattern to the 		
										endpoint.
Map(pattern, endpoint)					This method routes all HTTP requests that match the URL pattern to the endpoint.

endpoints are defined using RequestDelegate, the same delegate used by conventional middleware, endpoints are asynchronous methods that receive an HttpContext object and use it to generate a response

Endpoints generate response in the same way as the middleware, receive an HttpContext object that provides access to the request and response through HttpRequest and HttpResponse

when defining routes directly, changes this behavior so that request are always forwarded, terminal middleware will be used for every request

app.MapGet("myroute/loc", new MyClass().MyMethod);

URL Patterns
static segments (literal segments) match requests using fixed strings

route parameters (segment variables): expand the range of path segments that a pattern segment will match
app.MapGet("{first}/{second}", function() );

//getting the route parameters, HttpRequest.RouteValues, returns a RouteValuesDictionary object
app.MapGet("{first}/{second}/{third}", async context =>
{
    await context.Response.WriteAsync("Request Was Routed\n");
	foreach (var kvp in context.Request.RouteValues)
	{
		await context.Response.WriteAsync($"{kvp.Key}: {kvp.Value}\n");
	}
});

Useful RouteValuesDictionary members
Name				Description
[key]				The class defines an indexer that allows values to be retrieved by key.
Keys				This property returns the collection of segment variable names.
Values				This property returns the collection of segment variable values.
Count				This property returns the number of segment variables.
ContainsKey(key)	This method returns true if the route data contains a value for the specified key.

route selection
when processing a request, the middleware finds all the routes that can match the request and gives each a score, the route with lowest score is selected to handle the route
if two routes have the same score, they are both equally to routing the request, an exception will be thrown indicating an ambiguous routing selection
preferences
1.) literal segments
2.) segment variables with constraints
3.) segment variables without constraints

Generating URLs from routes
routing system allows URLs to ge generated by supplying data values for segment variables

app.MapGet("population/{city}", Population.Endpoint).WithMetadata(new RouteNameMetadata("population"));

LinkGenerator? generator = context.RequestServices.GetService<LinkGenerator>();
string? url = generator?.GetPathByRouteValues(context, "population", new { city = country });
if (url != null)
{
    context.Response.Redirect(url);
}

Managing URL matching

Matching multiple values from a single URL segment
app.MapGet("files/{filename}.{ext}", async context => { ... });

Using default values for segment variables
app.MapGet("capital/{country=France}", MyClass.MyMethod);

Optional segments in a URL Pattern
app.MapGet("size/{city?}", MyClass.MyMethod)

Catchall segment variable
allows routes to match URLs that contain more segments than the pattern
app.MapGet("{first}/{*catchall}", function);
first: will match the first parameter
*catchall: will match all the other parameters

Constraints
have the opposite effect and restrict matches
app.MapGet("{first:int}", 

The URL pattern constraints
Constraint					Description
alpha						This constraint matches the letters a to z (and is case-insensitive).
bool						This constraint matches true and false (and is case-insensitive).
datetime					This constraint matches DateTime values, expressed in the nonlocalized invariant culture format.
decimal						This constraint matches decimal values, formatted in the nonlocalized invariant culture.
double						This constraint matches double values, formatted in the nonlocalized invariant culture.
file						This constraint matches segments whose content represents a file name, in the form name.ext. The existence of the file is 
							not validated.
float						This constraint matches float values, formatted in the nonlocalized invariant culture.
guid						This constraint matches GUID values.
int							This constraint matches int values.
length(len)					This constraint matches path segments that have the specified number of characters.
length(min, max)			This constraint matches path segments whose length falls between the lower and upper values specified.
long						This constraint matches long values.
max(val)					This constraint matches path segments that can be parsed to an int value that is less than or equal to the specified value.
maxlength(len)				This constraint matches path segments whose length is equal to or less than the specified value.
min(val)					This constraint matches path segments that can be parsed to an int value that is more than or equal to the specified value.
minlength(len)				This constraint matches path segments whose length is equal to or more than the specified value.
nonfile						This constraint matches segments that do not represent a file name, i.e., values that would not be matched by the file 		
							constraint.
range(min, max)				This constraint matches path segments that can be parsed to an int value that falls between the inclusive range specified.
regex(expression)			This constraint applies a regular expression to match path segments.

Defining fallback routes
direct a request to an endpoint only when no other route matches a request, prevent requests from being passed further along the request pipeline by ensuring that the routing system will always generate a response
app.MapFallback()

basically creates a route that will be used as a last resort and will match any request

The methods for creating fallback routes
Name						Description
MapFallback(endpoint)		This method creates a fallback that routes requests to an endpoint.
MapFallbackToFile(path)		This method creates a fallback that routes requests to a file.

Advanced routing features
Creating custom constraints
implement IRouteConstraint interface

Avoiding ambiguous route expections

app.Map("{number:int}", async context =>
{
	await context.Response.WriteAsync("Routed to the int endpoint");
}).Add(b => ((RouteEndpointBuilder)b).Order = 1);

app.Map("{number:double}", async context =>
{
	await context.Response.WriteAsync("Routed to the double endpoint");
}).Add(b => ((RouteEndpointBuilder)b).Order = 2);

The properties defined by the Endpoint class
Name				Description
DisplayName			Property returns display name associated with the endpoint, can be set using the WithDisplayName method when creating a 	route.
Metadata			This property returns the collection of metadata associated with the endpoint.
RequestDelegate		This property returns the delegate that will be used to generate the response.



Chapter14
Using Dependency Injection







Might need to copy this:
{
  "iisSettings": {
    "windowsAuthentication": false,
    "anonymousAuthentication": true,
    "iisExpress": {
      "applicationUrl": "http://localhost:5000",
      "sslPort": 0
    }
  },
  "profiles": {
    "SportsStore": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "applicationUrl": "http://localhost:5000",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "IIS Express": {
      "commandName": "IISExpress",
      "launchBrowser": true,
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }
  }
}






















Left Off Page: 57

















































































































